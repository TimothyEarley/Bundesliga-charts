// Generated by CoffeeScript 1.10.0
(function() {
  var optionsPoints, optionsPointsPercent;

  optionsPoints = {
    title: {
      text: ''
    },
    chart: {
      renderTo: 'points_chart',
      type: 'line'
    },
    xAxis: {
      title: {
        text: 'Match #'
      }
    },
    yAxis: {
      title: {
        text: 'Points'
      }
    },
    legend: {
      layout: 'vertical',
      align: 'right'
    },
    series: []
  };

  optionsPointsPercent = {
    title: {
      text: ''
    },
    tooltip: {
      valueSuffix: '%'
    },
    chart: {
      renderTo: 'points_percent_chart',
      type: 'line'
    },
    xAxis: {
      title: {
        text: 'Match #'
      }
    },
    yAxis: {
      title: {
        text: '% Points'
      }
    },
    legend: {
      layout: 'vertical',
      align: 'right'
    },
    series: []
  };

  $.getJSON('http://www.openligadb.de/api/getmatchdata/bl1/2015', function(matchArray) {
    var game, goalsTeam1, goalsTeam2, i, len, match, points, pointsTeam1, pointsTeam2, result, team, team1, team2, teams;
    teams = [];
    for (i = 0, len = matchArray.length; i < len; i++) {
      match = matchArray[i];
      team1 = match.Team1.TeamName;
      team2 = match.Team2.TeamName;
      result = match.MatchResults[1];
      if (!result) {
        continue;
      }
      goalsTeam1 = result.PointsTeam1;
      goalsTeam2 = result.PointsTeam2;
      if (goalsTeam1 > goalsTeam2) {
        pointsTeam1 = 3;
        pointsTeam2 = 0;
      } else if (goalsTeam2 > goalsTeam1) {
        pointsTeam1 = 0;
        pointsTeam2 = 3;
      } else {
        pointsTeam1 = 1;
        pointsTeam2 = 1;
      }
      if (!teams[team1]) {
        teams[team1] = [];
      } else {
        pointsTeam1 += teams[team1][teams[team1].length - 1];
      }
      if (!teams[team2]) {
        teams[team2] = [];
      } else {
        pointsTeam2 += teams[team2][teams[team2].length - 1];
      }
      teams[team1].push(pointsTeam1);
      teams[team2].push(pointsTeam2);
    }
    for (team in teams) {
      points = teams[team];
      optionsPoints.series.push({
        name: team,
        data: points
      });
      game = 0;
      optionsPointsPercent.series.push({
        name: team,
        data: points.map(function(p) {
          game++;
          return p / (game * 3) * 100;
        })
      });
    }
    new Highcharts.Chart(optionsPoints);
    return new Highcharts.Chart(optionsPointsPercent);
  });

}).call(this);
